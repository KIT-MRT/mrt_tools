#!/bin/bash
SELF_DIR=$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )

if [ "$EUID" -eq 0 ]; then 
    echo "Please DO NOT run this script as root user"
    exit 1
fi

function package_installed {
	if dpkg -s $1 2> /dev/null | grep -q 'Status: install ok installed'; then
		echo "1"
		return
	fi
	
	echo "0" #not found
}

function ask_continue {
	read -r -p "Contiune [Y/n]? " response
	if [[ "$response" == "" ]]; then
		response="y"
	fi
	
	response=${response,,}    # tolower
	if [[ $response =~ ^(yes|y)$ ]]; then
		echo "1"
		return
	fi
	
	echo "0"
}

function ask_continue_exit {
	CO=$(ask_continue)
	if [[ $CO == "0" ]]; then
		exit 0
	fi
}

ERROR=false
function check_output {
    "$@"
    local status=$?
    if [ $status -ne 0 ]; then
        ERROR=true
    fi
    return $status
}

function ask_exit_on_error {
	if [ $ERROR == true ]; then
		CO=$(ask_continue)
		if [[ "$CO" == "0" ]]; then
			echo "Exit"
			exit 1
		fi
	fi
	
	ERROR=false
}

if ! [[ "$(uname -m)" == "x86_64" ]]; then
	echo "Error: Only 64bit platforms are supported"
	exit 1
fi

if ! [[ "$(lsb_release -r | awk '{print $2;}')" == "14.04" ]]; then
	echo "Error: Unsupported ubuntu version. Only 14.04 is support up to now."
	exit 1
fi

#define variables
MRT_PACKAGE_PATH="/mrtsoftware/pkg"
APT_PACKAGE_FILE_NAME="/etc/apt/sources.list.d/mrt.list"
PPA_URL="http://mrtdeb/deb"
ROS_PACKAGE_FILE_NAME="/etc/ros/rosdep/sources.list.d/20-default.list"
ROS_REPOSITORY_ENTRY="yaml file://$MRT_PACKAGE_PATH/share/ros/base.yaml"

#gather information
#check g++ version
GPP_FOUND=$(package_installed "g++-4.9")

#check cuda version
CUDA_FOUND=0
if [ -d "/usr/local/cuda-7.0" ] && [ $(readlink -f /usr/local/cuda) == "/usr/local/cuda-7.0" ]; then
	CUDA_FOUND=1
fi

function echo_found {
	if [ $1 == "1" ]; then
		echo "$2: $(tput setaf 1)no$(tput sgr0) (already installed)"
	else
		echo "$2: $(tput setaf 1)yes$(tput sgr0)"
	fi
}

echo_found $GPP_FOUND "Install gcc 4.9 and g++ 4.9"
echo_found $CUDA_FOUND "Install cuda 7.0 toolkit (graphics driver not included)"
echo "Install mrt build system: $(tput setaf 1)yes$(tput sgr0)"
ask_continue_exit "Contiune [Y/n]? "

#install gcc 4.9 and g++ 4.9
if [ $GPP_FOUND == "0" ]; then
	echo "Install gcc"
	check_output sudo add-apt-repository ppa:ubuntu-toolchain-r/test
	check_output sudo apt-get update
	check_output sudo apt-get install build-essential
	check_output sudo apt-get install gcc-4.9 g++-4.9
	check_output sudo update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-4.9 60 --slave /usr/bin/g++ g++ /usr/bin/g++-4.9
	
	ask_exit_on_error
fi

#install cuda
if [ $CUDA_FOUND == "0" ]; then
	cd /tmp
	mkdir cuda
	cd cuda
	check_output wget http://developer.download.nvidia.com/compute/cuda/repos/ubuntu1404/x86_64/cuda-repo-ubuntu1404_7.0-28_amd64.deb
	check_output sudo dpkg -i cuda-repo-ubuntu1404_7.0-28_amd64.deb
	check_output sudo apt-get update
	check_output sudo apt-get install cuda-toolkit-7.0
	
	ask_exit_on_error
fi

if ! grep -q -F "deb [arch=amd64] $PPA_URL trusty main" "$APT_PACKAGE_FILE_NAME"; then
	echo "Add apt mrt repository"
	check_output sudo apt-key adv --keyserver pool.sks-keyservers.net --recv-key 0x66FF02D7
	echo "deb [arch=amd64] $PPA_URL trusty main" | sudo tee "$APT_PACKAGE_FILE_NAME" > /dev/null
	check_output sudo apt-get update -o Dir::Etc::sourcelist="sources.list.d/mrt.list" -o Dir::Etc::sourceparts="-" -o APT::Get::List-Cleanup="0"
	
	ask_exit_on_error
fi

#add ros repository
if [ -z "$(apt-cache policy | grep -F http://packages.ros.org/ros/ubuntu)" ]; then
	echo "Add ros repository"
	check_output sudo sh -c 'echo "deb http://packages.ros.org/ros/ubuntu $(lsb_release -sc) main" > /etc/apt/sources.list.d/ros-latest.list'
	check_output sudo apt-key adv --keyserver pool.sks-keyservers.net --recv-key 0xB01FA116
	check_output sudo apt-get update
	
	ask_exit_on_error
fi

#install ros base
check_output sudo apt-get install ros-jade-ros-base

#install rosdep for dependency management

if ! [ -f "$ROS_PACKAGE_FILE_NAME" ]; then
	echo "Install and init rosdep"
	check_output sudo apt-get install python-rosdep
	check_output sudo rosdep init
	
	ask_exit_on_error
fi

#install mrt-cmake-modules to import the ros yaml file and cmake and revision control systems
sudo apt-get install mrt-cmake-modules cmake cmake-curses-gui cmake-qt-gui git

if ! grep -q -F "$ROS_REPOSITORY_ENTRY" "$ROS_PACKAGE_FILE_NAME"; then
	echo "Add ros mrt repository"
	check_output sudo echo $ROS_REPOSITORY_ENTRY | sudo tee --append "$ROS_PACKAGE_FILE_NAME" > /dev/null
	
	ask_exit_on_error
fi
check_output rosdep update

#install apt-get pacakges
#mrt-cmake-modules: 
#python-rosinstall: Used for managing all git repositories in a workspace
#python-yaml: Used in the auto dependency resolver to read the rosdep yaml file
#python-pip: Used to install further python packages
check_output sudo apt-get install mrt-build python-rosinstall python-catkin-tools python-rosdep python-rosinstall-generator python-wstool python-yaml python-pip --yes > /dev/null

#install pip python modules
#pyapi-gitlab: Used to communicate with the gitlab server (e.g. creating a project)
check_output sudo pip install pyapi-gitlab colorama 

#install gitlab private token
mrt_setup_gitlab

# TODO Adjust this to new python setup gitlab...

