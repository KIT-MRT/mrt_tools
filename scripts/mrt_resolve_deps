#!/usr/bin/python

import os
import sys
import subprocess
from subprocess import Popen, PIPE
import re
import colorama
import gitlab
colorama.init()

def getWorkspaceRootFolder(currentDir):
    curDir = currentDir
    found = False
    while (curDir != "/" and curDir != ""):
        if ".catkin_tools" in os.listdir(curDir):
            found = True
            break
        
        curDir = os.path.dirname(curDir)
    
    if not found:
        raise Exception("No catkin workspace root found.")
        
    return curDir

def getGitlabProjects():
    #define paths
    token_dir = os.path.expanduser("~/.mrtgitlab")
    token_file = token_dir+"/.token"
    host = "https://gitlab.mrt.uni-karlsruhe.de"

    #check for token file
    if not os.path.isfile(token_file):
        subprocess.check_call(["mrt_setup_gitlab"])

    #connect
    token = os.read(os.open(token_file,0),20)
    git = gitlab.Gitlab(host, token=token)
    
    #get all projects from gitlab
    return list(git.getall(git.getprojects))

def updateAptAndRosPackages():
    FNULL = open(os.devnull, 'w')
    subprocess.call(["sudo", "apt-get", "update", "-o", "Dir::Etc::sourcelist=", "sources.list.d/mrt.list", 
        "-o", "Dir::Etc::sourceparts=", "-", "-o", "APT::Get::List-Cleanup=", "0"], stdout=FNULL, stderr=FNULL)
    subprocess.check_call(["sudo", "apt-get", "install", "--only-upgrade", "mrt-cmake-modules", "--yes"], stdout=FNULL)
    subprocess.check_call(["rosdep", "update"], stdout=FNULL)

def main(useHttp, autoInstall):
    if not "LD_LIBRARY_PATH" in os.environ or not "/opt/ros" in os.environ["LD_LIBRARY_PATH"]:
        print "ROS_ROOT not set. Source /opt/ros/<dist>/setup.bash"
        sys.exit(1)

    regexRosdepResolve = re.compile("ERROR\[([^\]]*)\]: Cannot locate rosdep definition for \[([^\]]*)\]")

    gitlabProjectDownloaded = False
    firstMissingDep = True
    projects = None
    
    workspaceFolder = getWorkspaceRootFolder(os.getcwd())
    os.chdir(workspaceFolder)

    while True:
        rosdepProcess = Popen(['rosdep', 'check', '--from-paths', 'src', '--ignore-src'], stdout=PIPE, stderr=PIPE)
        rosdepOutput, rosdepErr = rosdepProcess.communicate()

        if not rosdepErr:
            break

        missing_packages = dict()
        for match in regexRosdepResolve.finditer(rosdepErr):
            missing_packages[match.group(2)] = match.group(1)

        if not missing_packages:
            print rosdepOutput
            print rosdepErr
            sys.exit(1)

        for missing_package, package_dep_specified in missing_packages.iteritems():
            if not gitlabProjectDownloaded:
                print "Retrieving gitlab projects"
                projects = getGitlabProjects()
                gitlabProjectDownloaded = True
            
            print colorama.Fore.RED + "Search for package " + missing_package + " (requested from: " + package_dep_specified + ")" + colorama.Fore.RESET
            
            #search for a gitlab projects
            gitlabProjects = list()
            for project in projects:
                if project["name"] == missing_package:
                    gitlabProjects.append(project)
            
            sshUrl = ""
            if len(gitlabProjects) == 0:
                #no gitlab project found
                if firstMissingDep:
                    #first not found package. Update apt-get and ros.
                    firstMissingDep = False
                    print colorama.Fore.GREEN + "Updating mrt apt-get and rosdep and resolve again. This might take a while ..." + colorama.Fore.RESET
                    updateAptAndRosPackages()
                    break
                
                while True:
                    #gitlab project not found. Prompt user to specify git uri for repository
                    sshUrl = raw_input("Enter git url: ")
                    
                    #check if valid git repositry is specified
                    gitProcess = Popen(['git', 'ls-remote', sshUrl], stdout=PIPE, stderr=PIPE)
                    gitOutput, gitErr = gitProcess.communicate()
                    
                    #git repository found
                    if gitErr:
                        print "Invalid git repository specified. Try again."
                        continue
                        
                    break
                    
                   
            elif len(gitlabProjects) == 1:
                #only one project found select this on.
                if useHttp:
                    sshUrl = gitlabProjects[0]["http_url_to_repo"]
                else:
                    sshUrl = gitlabProjects[0]["ssh_url_to_repo"]
            else:
                #multiple gitlab projects found. Prompt user.
                print "Multiple gitlab projects found:"
                for idx, gitlabProject in enumerate(gitlabProjects):
                    if useHttp:
                        print "[" + str(idx) + "]: " + gitlabProject["http_url_to_repo"]
                    else:
                        print "[" + str(idx) + "]: " + gitlabProject["ssh_url_to_repo"]
                
                selectionInt = -1
                while True:
                    selectionStr = raw_input("Select repository: ")
                    try:
                        selectionInt = int(selectionStr)
                        if selectionInt < 0 or selectionInt >= len(gitlabProjects):
                            raise ValueError()
                        break;
                    except ValueError:
                        print "Invalid input. Try again."
                
                if useHttp:
                    sshUrl = gitlabProjects[idx]["http_url_to_repo"]
                else:
                    sshUrl = gitlabProjects[idx]["ssh_url_to_repo"]
                
            #add specified git repository (ignore errors because repository could be added but not checked out)
            FNULL = open(os.devnull, 'w')
            print colorama.Fore.GREEN + "Found in " + sshUrl + ". Cloning." + colorama.Fore.RESET
            subprocess.call(["wstool", "set", missing_package, "--git",  sshUrl, "--confirm", "-t", "src"], stdout=FNULL, stderr=FNULL)
            subprocess.call(["wstool", "update", missing_package, "-t", "src"], stdout=FNULL)

    #install missing system dependencies
    if autoInstall:
        subprocess.check_call(["rosdep", "install", "--from-paths", "src", "--ignore-src", "-y"])
    else:
        subprocess.check_call(["rosdep", "install", "--from-paths", "src", "--ignore-src"])

if __name__ == "__main__":
    useHttp = "-http" in sys.argv
    autoInstall = "-y" in sys.argv
    main(useHttp, autoInstall)
    
