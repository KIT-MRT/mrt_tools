#!/bin/bash

function get_workspace_root_folder {
	x=$1; 
	while [[ "$x" != "/" ]]; do 		
		p=$(find "$x" -maxdepth 1 -type d -name ".catkin_tools")
        if [[ $p != "" ]]; then
			echo $(dirname "$p")
			return
		fi
		x=`dirname "$x"`
	done
}

function check_output {
    "$@"
    local status=$?
    if [ $status -ne 0 ]; then
        read -p "$(tput setaf 1)$(tput bold)There was an ERROR.$(tput sgr0). Do you still want to continue?  [Y/n]" yn 
	    yn="${yn:=y}" # Default answer
	    if [[ "${yn^^}" == "N" ]]; then exit 1; fi
    fi
}

# Change to root of workspace
WORKSPACE_ROOT_FOLDER=$(get_workspace_root_folder $PWD)
if [[ "$WORKSPACE_ROOT_FOLDER" == "" ]]; then
	echo "Cannot find workspace root folder."
	exit 1
fi
if [ ! -d "$WORKSPACE_ROOT_FOLDER/src" ]; then
    echo "No source folder found. This must be run in a standard catkin workspace (where you ran catkin_make)"
    exit 1
fi
cd "$WORKSPACE_ROOT_FOLDER/src"

# Run with "init?"
if [[ -f ".rosinstall" && "$#" -gt "0" && "$2" == "init" ]]; then
   echo "$(tput setaf 4)Removing wstool database src/.rosinstall$(tput sgr0)"
   rm -f .rosinstall
fi 

# Need to init wstool?
if [ ! -f ".rosinstall" ]; then 
    echo "$(tput bold)Initializing wstool...$(tput sgr0)"
    wstool init . > /dev/null
fi

# Customize the update routine
if [ "$1" == "update" ];then
	# find all git directories
	GIT_DIRECTORIES=$(find . -type d -name '.git')
	NR_GIT_DIRS=$(echo "$GIT_DIRECTORIES" | wc -l)
	I=0;
	for var in ${GIT_DIRECTORIES}
	do
		((I++));
		echo -en "$(tput bold)Updating repositories$(tput sgr0): [$I/$NR_GIT_DIRS]\r"
		GIT_DIR_BASE_NAME=$(dirname ${var})
		GIT_REPO_NAME=$(basename ${GIT_DIR_BASE_NAME})
		GIT_REPO_PATH=$(cat "${var}/config" | egrep '^[[:space:]]url' | awk '{print $3}')

		FIND_REPO_IN_DB=$(cat .rosinstall | grep ${GIT_REPO_PATH}) 
		if [[ -z ${FIND_REPO_IN_DB} ]]; then
			wstool set ${GIT_REPO_NAME} --git ${GIT_REPO_PATH} --confirm -t . > /dev/null 2>&1
			echo -e "$(tput bold)Found new git repository$(tput sgr0) '${GIT_DIR_BASE_NAME}': $(tput setaf 2)repository added$(tput sgr0)"
		fi
		
		cd $GIT_DIR_BASE_NAME
		
		# Push unpushed changes
		if [ "$2" == "push" ]; then
			PUSH_REPO=true;
		fi;
		if [[ -n $(git log --branches --not --remotes) ]]; then 
			echo -e "\n\nUnpushed commits in repo '${GIT_DIR_BASE_NAME}'"
			git log --branches --not --remotes --oneline
			while [ -z "$PUSH_REPO" ]; do     
			   read -p "Push them now? [Y/n]" yn 
			   yn="${yn:=y}" # Default answer
			   case ${yn^^} in      
					[Y]* ) PUSH_REPO=true;;  
					[N]* ) PUSH_REPO=false;;
					* ) echo "$(tput setaf 1)Please answer yes or no.$(tput sgr0)";;   
				esac  
			done   
			if $PUSH_REPO; then
				check_output git push
			fi;
		fi;
		
		#Pull new commits
		git fetch
		if [[ -n $(git log --remotes --not --branches) ]]; then 
			echo -e "\n\nPulling new commits in repo '${GIT_DIR_BASE_NAME}'"
			git log --remotes  --not --branches --oneline
			check_output git pull
			echo ""
		fi;
		cd "$WORKSPACE_ROOT_FOLDER/src"
	done
	echo "$(tput bold)Done updating.$(tput sgr0)                   ";

	# Testing for old, non existent repos in .rosinstall
	# Gathering all package names
	for W in $(cat .rosinstall | cut -d ' ' -f 4); do

		# Removing trailing comma
		pkg_name=${W%,} 

		# If package folder does not exist anymore
		if ! [ -d $pkg_name ]; then

			# Remove corresponding line from .rosinstall
			sed -i -e "/$W/d" .rosinstall
			echo "$(tput bold)Found old git repository$(tput sgr0) '${pkg_name}': $(tput setaf 1)Deleting entry from wstool$(tput sgr0)"

		fi;
	done;

	exit 0;

fi

# Now proceed with wstool
wstool $1

exit 0